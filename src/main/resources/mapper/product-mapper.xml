<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rakbow.kureakurusu.dao.ProductMapper">

    <sql id="selectFields">
        id, name, name_zh, name_en, release_date, franchise, category,
        images, organizations, staffs, description, remark, added_time, edited_time, status
    </sql>

    <sql id="insertFields">
        name, name_zh, name_en, release_date, franchise, category,
        images, organizations, staffs, description, remark, added_time, edited_time, status
    </sql>

    <select id="getProduct" resultType="Product">
        select
        <include refid="selectFields"></include>
        from product
        where id = #{id}
        <if test="!status">
            and status = 1
        </if>
    </select>

    <select id="getProducts" resultType="Product">
        select
        <include refid="selectFields"></include>
        from product
        <where>
            id in
            <if test="ids != null and ids.size() != 0">
                <foreach item="item" index="index" collection="ids" open="("
                         close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        order by
        <if test="ids != null and ids.size() != 0">
            <foreach item="item" index="index" collection="ids" open="FIELD(id,"
                     close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="getAll" resultType="Product">
        select
        <include refid="selectFields"></include>
        from product
    </select>

    <insert id="addProduct" parameterType="Product" keyProperty="id">
        insert into product (<include refid="insertFields"></include>)
        values (#{name}, #{nameZh}, #{nameEn}, #{releaseDate}, #{franchise}, #{category},
        #{images}, #{organizations}, #{staffs}, #{description}, #{remark}, #{addedTime}, #{editedTime}, #{status})
    </insert>

    <update id="updateProduct" parameterType="Product" keyProperty="id">
        update product
        set
        name = #{product.name}, name_zh = #{product.nameZh}, name_en = #{product.nameEn},
        release_date = #{product.releaseDate}, franchise = #{product.franchise}, category = #{product.category},
        remark = #{product.remark}, edited_time = #{product.editedTime}
        where id = #{id}
    </update>

    <delete id="deleteProduct">
        delete
        from product
        where id = #{id}
    </delete>

    <update id="updateProductStaffs" keyProperty="id">
        update product
        set
        staffs = #{staffs}, edited_time = #{editedTime}
        where id = #{id}
    </update>

    <select id="getProductsByFilter" resultType="Product">
        select
        <include refid="selectFields"></include>
        from product
        <where>
            <if test="name != null and name != '' ">
                and name like concat('%', #{name}, '%')
            </if>
            <if test="nameZh != null and nameZh != '' ">
                and name_zh like concat('%', #{nameZh}, '%')
            </if>
            <if test="franchises != null and franchises.size() != 0">
                <foreach item="item" index="index" collection="franchises" open=" and franchise in ("
                         close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="categories != null and categories.size() != 0">
                <foreach item="item" index="index" collection="categories" open=" and category in ("
                         close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="!status">
                and status = 1
            </if>
        </where>
        <if test="sortField == 'id'">
            <if test="sortOrder == 1">
                order by id asc
            </if>
            <if test="sortOrder == -1">
                order by id desc
            </if>
        </if>
        <if test="sortField == 'releaseDate'">
            <if test="sortOrder == 1">
                order by release_date asc
            </if>
            <if test="sortOrder == -1">
                order by release_date desc
            </if>
        </if>
        <if test="sortField == 'category'">
            <if test="sortOrder == 1">
                order by category asc
            </if>
            <if test="sortOrder == -1">
                order by category desc
            </if>
        </if>
        <if test="sortField == 'status'">
            <if test="sortOrder == 1">
                order by status asc
            </if>
            <if test="sortOrder == -1">
                order by status desc
            </if>
        </if>
        <if test="sortField == null">
            order by id desc
        </if>
        <if test="row != 0">
            limit #{first}, #{row}
        </if>
    </select>

    <select id="getProductsRowsByFilter" resultType="int">
        select count(id)
        from product
        <where>
            <if test="name != null and name != '' ">
                and name like concat('%', #{name}, '%')
            </if>
            <if test="nameZh != null and nameZh != '' ">
                and name_zh like concat('%', #{nameZh}, '%')
            </if>
            <if test="franchises != null and franchises.size() != 0">
                <foreach item="item" index="index" collection="franchises" open=" and franchise in ("
                         close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="categories != null and categories.size() != 0">
                <foreach item="item" index="index" collection="categories" open=" and category in ("
                         close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="!status">
                and status = 1
            </if>
        </where>
    </select>

    <update id="updateProductOrganizations" keyProperty="id">
        update product
        set
        organizations = #{organizations}, edited_time = #{editedTime}
        where id = #{id}
    </update>

</mapper>